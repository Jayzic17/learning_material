	

git checkout feature_branch
git merge master_branch
	* merges master INTO feature_branch

ssh-keygen -t rsa
	* generates pub/private keypair

git reset --hard HEAD~[n]
	* removes the last "n" commits from the local branch
	* WARNING: this deletes all unstaged changes

git reset --hard HEAD~[n]
git push --force
	* forces the removal of the last "n" commits from the remote branch

git push -u origin [branch_name]
	* if you created a branch locally named: "branch_name" that doesn't exist remotely and you're committing...
	* ...changes for the first time, use the upstream option "-u" to create the remote branch

git checkout [branch_name]
git branch [new_branch_name]
	* creates a new branch from the branch you're currently in

git checkout [some_other_branch]
git branch -a
	* lists out all local and remote branches

git branch -d [branch_to_delete]
	* deletes the local branch: "branch_to_delete"

git config --global user.name "Jonathan Gorczyca"
	* sets your Git username for all repos on your computer

git config --global user.email "youremail@yourdomain.com"
	* sets your Git email for all repos on your computer

git restore --staged path_to_file
	* undo all the changes to a modified file that is currently staged

git restore path_to_file
	* undo all the changes to a modified file that isn't staged

rm -rf .git
	* uninitializes the git repo

git config --global http.sslVerify false
	* disables SSL
	* DO NOT DO THIS UNLESS ABSOLUTELY NECESSARY

git config --global http.sslVerify true
	* enables SSL

git config --get remote.origin.url
	* gets the url for which this git repo is pointing to

git pull origin [remote_branch_name] --allow-unrelated-histories
	* if you get an "unrelated histories" issue when pushing to remote, use this flag when pulling from the remote for resolution

git stash
	* you would use this to stash unstaged changes you made, so that they don't get overriden by a: $ git pull

git stash pop
	* you would run this after running $ git stash, followed by: $ git pull, to reintroduce your stashed code

git checkout [local_feature_branch]
git merge origin/[master_branch]
	* this pulls in and merges the latest remote master to your local feature branch

git checkout [feature_branch]
git checkout [branch_that_contains_the_file_you_want] -- [file_name]
	* this pulls a file from another branch into your feature branch

git checkout [local_branch]
git reset --hard origin/[remote_branch]
	* if stuff got recently pushed to remote that you are completely alright with using to overwrighting your local with, run these commands
	* just be aware that this would diverge your local branch from the remote one

---AWS---

git remote -v
	* lists out all remote branch nicknames that CodeCommit connects to
git remote rm [remote_branch_nickname]
	* removes the remote CodeCommit branch by nickname


