


2 main types of shell environments:
	* Interactive Login Shell: created when you physically sit down and log into the Bash Terminal, or when you connect to the Bash Terminal remotely via SSH
		* how it works:
			* type in your password and login
			* /etc/profile config file gets read and calls the /etc/profile.d directory to pull-in any extra config info
			* /etc/profile then calls the ~/.bash_profile file, which then calls the ~/.bashrc file, which then calls the /etc/bashrc file to pull-in system config info
			* Interactive Login Shell is now created
	* Interactive Non-Login Shell: created whenever you start-up a Terminal Application: additional Terminals available from the Bash Terminal
		* how it works:
			* User is logged in to the Bash Terminal
			* User starts up a Terminal Application
			* ~/.bashrc file calls /etc/bashrc file to pull-in system config info
			* Non_Login Shell is created
	* $echo $0: shows you the name of the Process that you're currently running
		* EX: $echo $0: output: -bash
		* a preceeding "-" means you're running an Interactive Login Shell
		* no preceeding "-" means you're running an Interactive Non-Login Shell
daemons are the same thing as a service: a program that runs in the background w/o the User interacting with it
Absolute Path: (see: linux101_notes.txt for additional information)
in Linux and Unix, file extensions don't matter at all when running/opening something; all the OS needs is the contents of the files themselves; we just do it for convenience-sake
X11: a protocol that determins how we have graphics displayed on Unix-like OS's like Linux
	* handled by the X.org foundation
	* X Server: the core Display Server system that provides the protocol service(X11) for the X Window System
		* X Window System: provides basic 2D rendering
		* also handled by the X.org foundation
		* X Server architecture:
			* graphics card
			* Kernel & graphics drivers
			* libDRM: Direct Rendering Manager; a library that sits btwn the Kernel and the X.org Server
			* the X Server itself
			* Xlib |or| XCB: libraries that send drawing requests to the X.org Server
				* XCB: typically used by the KDE desktop
			* Display Manager (GNOME, KDE, Xfce, etc.): sends instructions to Xlib or XCB
			* the application itself: referring to the application that you see on your screen
		* the graphical renderings on an X11 display are clients of the X Server
	* provides extra functionality via extensions such as:
		* RandR: provides dynamic resizing of the root window, refresh rates, mirroring displays, etc.
		* GLX: provides rendering of 3D OpenGL content within X11 windows
		* Xinerama: provides the ability to split the desktop display across multiple monitors
Wayland: replacement for the X Window System
	* new protocol that uses a simpler rendering protocol than X11
	* constantly updating and improving to bring it up to feature parity with X11
	* provides XWayland: a library that enables X Window clients to render with Wayland (backwards compatibility)
Display Server: handle's the protocol to be used for how we have graphics displayed
Display Manager: handles a User's session in authentication, starts-up the Display Server, and loads-up the computer after login
	* EX: GNOME Display Manager (GDM)
	* never login to an X session with the Root User
Desktop Environment: contains a Window Manager, terminal, and other utilities used to configure your desktop
	* lets you use Activities: the equivalent of doing the "3 fingers-up" keystroke on a Mac
	* you can select the Desktop Environment you want to be in by selecting the gear icon before you sign in to your computer
	* on all Desktop Environments, press: [ALT] + [F2] to perform a search
	* includes Assistive Technologies: software that helps people that have poor eyesight, bad hearing, etc.
		* located under: Settings > Universal Access
		* high contrast: turns everything black and white
		* large text
		* cursor size
		* zoom
		* screen reader: enables Orca, which is a text-to-speech software that reads-out everything your cursor hovers over
		* sound keys: plays a sound everytime the num lock or caps lock keys are pressed
		* visual alerts: screen flashes whenever your computer gets an alert
		* screen keyboard: gives your screen a keyboard in the event that you keyboard doesn't work, but your mouse does
		* repeat keys
		* cursor blinking
		* sticky keys, slow keys, bounce keys
		* mouse keys: lets you use you number pad as a mouse
		* click assist: lets you enable hover clicks, and lets you trigger a secondary click when you hold-down on the mouse
		* double-click delay
	* 2 types:
		* GTK+ (a.k.a GIMP)-based desktops: a C language library; desktops that use this library include GNOME and XFCE
			* is extremely customizeable and light on resources
			* on GNOME, use: [CTRL] + [ALT] + [UP, DOWN] to switch Activities
			* on XFCE, use the Activity switcher at the top right of the upper taskbar to switch Activities
		* Qt-based desktops: a C++ language library; desktops that use this library include KDE
			* is extremely customizeable and contains a lot of widgets
			* on KDE, create a new Activity by clicking the bottom-left of the lower taskbar, or the upper right of the upper taskbar
Window Manager: is what provides the look and feel of the desktop on a computer like icons, colors, tabs, etc.
	* EX: Tab Window Manager (TWM): one of the simplest desktop set-ups you can have in Linux
VNC: Virtual Network Computing; gives you the ability to view and control an entire computer remotely
SPICE: Simple Protocol for Independent Computing Environments; protocol that also allows for controlling a remote desktop, but is usually used for VM's
	* already encrypted using TLS, unlike VNC which is unencrypted by default, but this DOES come at a performance cost
	* also lets you transport 2-way audio over a SPICE connection
	* also lets you use USB re-direction over two computers using a SPICE connection
Timer Unit: a timer controlled by systemd
	* each .timer Unit file has a matching .service Unit file
		* so the .timer Unit is the actual Timer, while the .service Unit picks-up the .timer Unit once time is up
	* 2 types of Timer Units in systemd:
		* Monotonic: runs after a certain amount of time has passed based on a starting point
			* defined by: ObBootSec, or OnActiveSec
			* can specify a timeframe to repeat, so long as the computer is running
			* if the computer is off, these timers will be deleted
		* Realtime: runs based off of a specifice calendar date
			* defined by: OnCalendar
	* Timer Units are sometimes simpiler syntax compared to $ cron, or $ at, commands depending on the command
	* Transient Timer Unit: set up by $ systemd-run, command; does NOT require a .service Unit file
	* output (.timer file):
		* [Unit] section: contains a descripton and references to documentation regarding the Timer Unit
		* [Timer] section:
			* OnBootSec=,ObUnitActiveSec= |or| OnCalendar=[year]-[month]-[day] [##]:[##]:[##]: tells you whether or not it is a Monotonic or Realtime Timer respectively
			* Unit=: tells you what .service Unit file this Timer is responsible for
			* Persistant=true: means that if the last-scheduled run did not occur, execute the .service Unit immediately
		* [Install] section:
			* WantedBy=[target_here].target: the Target Unit associated with this Timer
				* some Timers are enabled with the timers.target Target Unit...
				* ...but most of the time it's just the .target file associated with the Timer's .service file
	* output (.service file):
		* [Unit] section: contains a descripton and references to documentation regarding the Timer Unit
		* [Service] section: specifies what type of Service is being run, and what commands it will run
			* if Type=oneshot, then it's Monotonic
			* if Type=simple, then it's Realtime
UTF-8: most popular 8-bit character encoding format; is part of the Unicode standard; contains ASCII
ISO-8859: most popular character encoding format used in Europe; contains 88592-1 through 88592-15; lets you set specific character encodings based on a User's need, depending on their country
if you ever see box-looking characters in an output, it means those are standing characters for letters that can't be read, due to us using a different character encoding format than that of the output
Network Time Protocol (NTP): a protocol in which your computer gets its current time by making a request to an NTP server, as opposed to your computer's local, universal, or Real-time Clock
	* this protocol is optional, and can be enabled on all Linux computers if preferable
	* NTP servers are broken up into 3 stratum:
		* Stratum 0: contains reference clocks by utilizing atomic clocks, GPS clocks, etc. to maintain very precise times
		* Stratum 1: contains NTP servers that request from Stratum 0; Stratum 1 NTP servers sync with each other to make sure each time is accurate
		* Stratum 2: also contains NTP servers that request from Stratum 1; they also sync with each other to make sure each time is accurate
		* after Stratum 2 are all computers, routers, smart devices, etc.
		* the furthur down you go, the less accurate the time
		* ntpd: the NTP daemon that queries NTP servers for the correct time
			* run it by using: $ service ntpd start
		* chronyd: the modern NTP daemon used on systemd computers
			* run it by using: $ service chronyd start
		* NTP uses the UDP port number 123
rsyslog: legacy logging Service daemon
	* on systems that don't run systemd, the rsyslog daemon manages:
		* /var/log/dmesg
		* /var/log/messages
		* /var/log/secure
		* /var/log/maillog
	* run it by running: $ service rsyslog start
logrotate: daemon that is responsible for managing the storage and rotation of old log files
Logging Priority Levels:
	* 0: emerge: means that your computer is in an unusable state; if this type of log is generated, a message gets sent out to all Users on the computer
	* 1: alert: means that you must take immediate action before your computer becomes unusable
	* 2: crit: means that hardware is in critical condition
	* 3: err: a.k.a stderr; comes from either a Service or some daemon
	* 4: warn: refers to something that should be investigated, but does not necessarly break any functionality
	* 5: notice: not as bad as warnings, but still require some investigation before the issue could become a problem later on
	* 6: info: just refers to info about a Service or application; is no cause for concern
	* 7: debug: useful to programmers needing to debug something
Facility: the item that is generating a particular log message (the main one being the Kernel)
	* Linux Logging Facilities:
		* kern: Kernel messages
		* user: messages that are being generated by a User directly or indirectly when they're using some application
		* mail: deals with email Services that are already installed on the computer
		* daemon: messages that are generated by system Services
		* auth: deals with anything relating to security of authentification
		* syslog: anying generated by the logging daemon itself
		* lpr: deals with printing jobs (like with a literal printer)
		* news: deals with the news Service using the NNTP Protocol; usually you'll only see these if you're working with an ISP
systemd Journal: a binary file that records everything on the computer
	* contains:
		* Kernel log messages
		* syslog messages
		* any system Services that send output to stdout and/or stderr
		* audit records for SELinux messages (Red Hat-based)
	* by default, it's located in: /run/log/journal
	* gets recreated on reboot, cause it's a lot of data
		* but if you want to retain that data from previous reboots, run:
			* $ mkdir -p /var/log/journal
			* $ systemd-tmpfiles --create --prefix /var/log/journal
	* you can have more than 1 systemd Journal on a computer at a time
	* Service Catalog: provides some extra text for journal entries that can help explain what caused an issue
		* gives links to documentation and other troubleshooting steps
		* compares itself with the journal entries' message ID to see if there is additional info
		* not all journal entries will have an entry in the Service Catalog
Message Transfer Agent (MTA): daemon that routes email to wherever it's supposed to go
	* MTA will send the email to a Message Delivery Agent (MDA) on TCP port 25
	* then the MDA will send the email to the Message User Agent (MUA), which is essentially an email client
	* sendmail: one of the oldest MTA systems around; was default on many Linux distros; very difficult to configure
	* postfix: modern MTA system found on many Linux distros; easier to configure; great security
	* exim: MTA system; used to be default for Debian-based distros; great security; also easier to configure than sendmail
	* Sendmail Emulation Layer: lets sysadmins use sendmail commands on other MTA's like postfix and exim
Common UNIX Printing System (CUPS): the system that lets you use a printer on your Linux computer
	* http://localhost:631: web interface for printing; default url for the locally installed CUPS server; requires Root User to add and remove printers here
	* IPP: Internet Printing Protocol (unencrypted)
	* IPPS: Internet Printing Protocol Secure (encrypted)
	* comes packaged with the: Line Print Daemon (LPD)
	* HP printers use port 9100
	* PPD file: Postscript Printer Description file
Internet Protocol (IP): an address that is assigned to a machine, so that other machines can communicate with each other
	* 2 versions:
		* IPv4: four octets containing numbers 0 to 255
			* EX: 192.168.0.30
		* IPv6: 128bit hexadecimal number
			* EX: 2DAP:FF40:0928:CD01:4433:00DD:0988:FFFF
	* a "0" in an IP address means it can be any number from 0 to 255
	* IP Class Ranges:
		* RFC 1918: describes the 5 ranges that determines how many computers that are available with each class
		* the 1st octet in an IPv4 address tells you which class it is
			* Class A: range: 1 - 126; number of computers: 16,777,214
			* Class B: range: 128 - 191; number of computers: 65,534
			* Class C: range: 192 - 223; number of computers: 254
			* Class D: range: 224 - 239; number of computers: *reserved for multicast
			* Class E: range: 240 - 254; number of computers: *reserved for future use/research/development needs
		CIDR Notation for each Class:
			* Class A: 255.0.0.0/8
			* Class B: 255.255.0.0/16
			* Class C: 255.255.255.0/24
Network Mask: defines a subnet that indicates the start and end of a range of IP addresses
	* each address Class Range has an associated Network Mask and Subnet Mask
Private IPs: addresses that are used for internal networks; prevents the need for every computer to have an IP address assigned to it from a central authority
	* so instead of your ISP giving you an IP, your router gives you one
		* this means that they're not publicly routable, meaning they will only route within an internal network, not the internet
	* Private IP address ranges:
		* 10.0.0.0 - 10.255.255.255; number of computers: 16,777,216; CIDR Notation: 10.0.0.0/8; Class description: single Class A network
		* 172.16.0.0 - 172.31.255.255; number of computers: 1,048,576; CIDR Notation: 172.16.0.0/12; Class description: 16 contiguous Class B networks
		* 192.168.0.0 - 192.168.255.255; number of computers: 65,536; CIDR Notation: 192.168.0.0/16; Class description: 256 contiguous Class C networks
Network Gateway: destination where network traffic goes that has no other matching route or that is not intended for the local network, so essentially another network
Broadcast Address: an IP address that is used to broadcast messages to all computers on a particular network
	* this is why its last octet is always "255"
	* EX: 192.168.0.255 is the Broadcast Address for the 192.168.0.0/24 network
Transmission Control Protocol (TCP): method in which all transactions btwn IP addresses are communicated
	* transmits and verifies that data traffic arrives at its destination and can be assembled again in its correct order
	* relies on the Send and Acknowledgement system, meaning the sender will send a data packet and wait for an acknowledgement from the receiver
	* each data packet contains a number indicating to the receiver how the data should be reassembled in a particular order
User Datagram Protocol (UDP): stateless connection btwn 2 IP addresses
	* data packets are sent to the receiver w/o any acknowledgement, but the upside is that it means less network overhead
	* EX: network gaming, DNS, non-critical data
Internet Control Message Protocol (ICMP): intended for networking devices such as routers, switches, firewalls, and other devices to send error messages btwn themselves
	* often used to query a network device to check its availability
	* commands that utilize ICMP:
		* $ ping
		* $ traceroute
important Environment Variables:
	* $PATH: see: linux101_notes for details
	* $DISPLAY: shows display information
		* output: [hostname]:[number1].[number2]
			* hostname: the host that the X Server is running on (if the X Server is local to the computer, then it's left blank)
			* number1: indicates which X Server is in-use; the 1st X Server instance gets the number 0
			* number2: indicates which screen we are seeing things displayed on for the computer; the 1st screen gets the number 0
	* $LANG: controlls the language that the computer uses
		* it takes in as a value a locale, which you can find a list of by running: $ localectl list-locales
		* this only applies to when the computer responds back to you, not for when you type something (i.e: doesn't affect character-encoding)
		* this also won't affect already-installed stuff, like man pages, but it WILL affect all future downloads
		* assigning it the value "C" makes it so that it uses the C language's environment for a locale setting, regardless of where you are in the world
		* this change is temporary; to make it permanent run: $ localectl set-locale [locale_here] 
important files:
	* /
		* /etc
			* /etc/profile: the 1st file read as part of User login; sets up system-wide Environment Variables, umask values, Bash History controls, sets up your $PATH...
				* ...sets up your $HISTSIZE, 
			* /etc/profile.d: the directory that contains extra config files for Bash; /etc/profile pulls-in the contents of this directory
			* /etc/bashrc: file that lets you configure computer-wide functions and aliases; read as part of User login
				* sets-up the visual appearence of your Terminal, as well as some additional Bash Shell Options
			* /etc/skel: helps set-up a User's /home directory whenever a new User is created on the computer
				* contains templates for making /home/.bashrc, /home/.bash_profile, and /.bash_logout files
			* /etc/X11/xorg.conf: configuration file for the X Server (legacy to the /etc/X11/xorg.conf.d directory)
				* contains the following sections:
					* ServerLayout: combines the I/O devices used within a User session
					* InputDevice: defines the keyboard that the X Server will use for input
						* the keyboard gets an identifier, and gets which Kernel Module is used as the driver for the hardware
					* Device: indicates the type of graphics card being used, and the driver that the Kernel will use for the card
					* Screen: combines the graphics card and monitors that we are using to display the graphics
				* contains the following sub-sections:
					* Display: contains the Modes option, which configures the screen size
						* format the value for the Modes option like this: "1280x720" "800x600", with higher res towards the left
						* this way if the computer can't handle the higher res, it falls back to the smaller one
			* /etc/X11/xorg.conf.d: directory that contains additional configuration for X11 (newer to the /etc/X11/xorg.conf file)
				* configuration files are formated like: [##]-[file_name].conf, where the 1st 2 digits determine the order in which each configuration is loaded
					* if you did have a /etc/X11/xorg.conf file, that always gets loaded last after all the one's in /etc/X11/xorg.conf.d
			* /etc/X11/prefdm: script that determins which Display Manager to use for the computer based on which one is currently installed (CentOS)
				* is ran when the computer switches to RunLevel 5
			* /etc/systemd/system/display-manager.service: Service that determins which Display Manager to use for the computer based on which one is currently installed (systemd)
				* is ran when the computer switches to RunLevel 5
			* /etc/passwd: database file that contains info on all User, Service, and System accounts
				* output:
					* each line represents an account
					* colon ":" delimiated lines
					* column 1: User name
					* colunm 2: the User's password (typically an "X" to show that it is encrypted); the actual passwords themselves are in the: /etc/shadow file
					* column 3: User ID (the Root User's is always 0)
						* on Red Hat Distros, all System accounts have a User ID below 1000, and all User accounts are above 1000
					* column 4: Primary Group ID (the Root User's is always 0)
					* column 5: User ID info (typically the Comment for that User)
					* column 6: the Absolute Path to the User's /home directory
					* column 7: default shell for the User (System accounts are always: sbin/nologin)
			* /etc/shadow: database file that contains the encrypted passwords of all User, Service, and System accounts
				* output and columns are the same as: /etc/passwd's, EXCEPT:
					* column 2: the User's encrypted password ("$" delimiter seperates the encryption algoritm, the salt, and the actual encrypted password)
						* for a User account, a leading "!" implies the User account is locked
						* Service and System accounts don't have a password, so they'll just get a: "!!" = account is locked, or...
						* ..."*" = account is locked + no password was ever created
					* column 3: days that have passed since Linux Epoch that the User's password was last changed
					* column 4: minimum # of days btwn password changes allowed for this User
					* column 5: maximum # of days before the User is required to change their password
					* column 6: # of days before the User's current password expires (they will have been notified of this ahead of time)
					* column 7: Inactive Column: # of days after a User's password has expired before the computer deletes the User from the computer entirely
					* column 8: the date when a User's account will expire (# of days since Unix Epoch)
			* /etc/group: database file that contains info on all Groups
				* output:
					* each line represents an account
					* colon ":" delimiated lines
					* column 1: Group name
					* column 2: password (Groups typically don't have passwords; typically an "X" to show that it is encrypted)
					* column 3: Group ID
					* column 4: all Users in the Group
			* /etc/default/useradd: file that is referenced by the $ useradd command when a new User is created
				* output:
					* GROUP: indicates the Group that the new User should be added to
					* HOME: where the User's /home directory will reside
					* INACTIVE: -1 = User is not disabled as soon as their password expires, 0 = User IS disabled as soon as their password expires
					* EXPIRE: the date that the User will expire
					* SHELL: the default shell for the User
					* SKEL: the default files that the User's /home directory will receive
					* CREATE_MAIL_SPOOL: does the new User get a mail directory? (yes/no)
			* /etc/login.defs: file that overrides any of the values set in the /etc/default/useradd file when creating a new User
				* so if you want to modify any default behavior when creating a new User, use this file, not /etc/default/useradd
			* /etc/cron.hourly, /etc/cron.daily, /etc/cron.weekly, /etc/cron.monthly: directories that contain System account scripts that run hourly, daily, weekly, and monthly
				* these are regular script files, and are NOT in the format of a crontab file
			* /etc/cron.d: the cronjob directory for the whole computer
				* these ARE crontab files for the whole computer
			* /etc/cron.deny: Users listed in this file will be prevented from using crontab files
			* /etc/cron.allow: Users listed in this file will be permitted to use crontab files; one's who aren't don't get to
			* /etc/at.deny: Users listed in this file will be prevented from using the $ at, command
			* /etc/at.allow: Users listed in this file will be permitted to use $ at, commands; one's who aren't don't get to
			* /etc/localtime: a Symbolic Link to the /usr/share/zoneinfo/[timezone] file, which keeps track of the computer's timezone (Red Hat-based)
			* /etc/timezone: file that keeps track of the computer's timezone (Debian-based)
			* /etc/ntp.conf: config file that is used by the ntpd NTP daemon ($ service ntpd start), so that it knows which NTP servers to call
				* contains a list of NTP servers
				* output: server [hostname] [option(s)]
					* the "iburst" option means that instead of sending one packet to the NTP server, it will send 8 if the NTP server can't be contacted for some reason
				* if an NTP server cannot be contacted, the NTP daemon moves on to the next NTP server in the list
			* /etc/chrony.conf: config file that is used by the chronyd NTP daemon ($ systemctl start chronyd.service), so that it knows which NTP servers to call (Red Hat-based)
				* output: pool [hostname] [option(s)]
				* if an NTP server cannot be contacted, the NTP daemon moves on to the next NTP server in the list
			* /etc/rsyslog.conf: the rsyslog daemon config file
				* output:
					* RULES: dictates where the log messages end up
						* column 1: the type of log
							* follows the format: [Facility].[Priority Level];[Facility2].[Priority Level2];...
							* you can use "*" for the Facility and Priority_Level fields
							* you can use "none" in the Priority_Level field so that no logs of the specified Facility will end up in the destination log file
						* column 2: the log file where the logs end up
							* a preceeding "-" means that the log file does not need to be synced to the hard drive everytime a message is written to it
								* this helps with performance
							* a "~" means instead of writing something to a log file, just delete the log message instead
							* a "*" means the log message gets sent to /var/log/messages and the console
				* you WANT to explicitly exclude certain log messages because they'll be sent to /var/log/messages by default if they go unmentioned
					* so you'll want to use "none," so that the same log message doesn't appear in 2 places at once
			* /etc/rsyslog.d: directory that contains additional configurations for the rsyslog daemon
			* /etc/logrotate.conf: configuration file for the logrotate daemon
				* commands:
					* $ weekly: rotate log files weekly 
					* $ rotate [number]: retain 4 log files at all times
					* $ missingok: don't issue an error if the log file is missing
					* $ notifempty: do't rotate the log file if it's empty
					* $ compress: compress log files; gzip is the default
					* $ delaycompress: postpone compression of the previously rotated log file to the next rotation cycle
					* $ postrotate: indicates the beginning of a script that will run on the log file after rotation
					* $ endscript: indicates the end of the postrotate script
					* specific rules for specific log files
						* EX: /var/log/wtmp {
							monthly
							rotate 1
							...
						      }
			* /etc/logrotate.d: additional configurations for the logrotate daemon
			* /etc/systemd/journald.conf: configuration file for the systemd Journal
				* output: 
					* [Journal] section
						* Storage=[auto, persistent, volatile, none]
							* auto: default; will store data to: /var/log/journal if it exists, and to: /run/log/journal
							* persistent: data is stored to /var/log/journal
							* volatile: data is only sent to /run/log/journal; resides in memory
							* none: no data is kept
						* Compress=[yes, no]
							* yes: default; any data above a certain threshold are compressed before they are written to disk
							* no: nothing is compressed
						* SystemMaxUse=
							* pertains to the disk space the journal can use (default is 10%)
						* RuntimeMaxUse=
							* pertains to the amount of RAM the journal can use (default is 10%)
						* SystemMaxFileSize=
							* pertains to how large individual journal files get (use K, M, G, etc. for file sizes)
						* RuntimeMaxFileSize=
							* pertains to how large individual journal files get in RAM (use K, M, G, etc. for file sizes)
						* MaxRetentionSec=
							* max amount of time to store journal entries
							* typically, size-based deletions like SystemMaxUse are enough to handle this
							* default is 0, meaning that it's off
							* default unit time is seconds, but you can set it to be: years, month, week, day, h, or m
			* /etc/aliases: file that can be modified to setup email forwarding addresses for Users on the computer
				* output:
					* column 1: User
					* column 2: ":"
					* column 3: User that will be forwarded all emails from the User in column 1 (usually the Root User)
				* once you're done modifying this file, you MUST run: $ newaliases, which will re-generate /etc/aliases.db
				* any aliases included here that contains a User that does not exist on the computer will have any emails to them rejected
			* /etc/aliases.db: database file that the MTA uses for mail delivery
			* /etc/cups: directory that contains the config files for the CUPS print daemon and printer settings
				* /etc/cups/cupsd.conf: config file for the CUPS server
					* it's preferred to use the web interface at: http://localhost:631
					* contains logging info, hosted ports, turn on or off the ability to see network-connected printers, turn the web interface on or off...
					* ...authentification method when performing admin tasks with the CUPS server, etc.
				* /etc/cups/printers.conf: config file for the printers that are on the computer's network
					* it's preferred to use the web interface at: http://localhost:631
					* should not modify this file when the CUPSD service is running
					* each printer is seperated by: <Printer...> ... </Printer> stanza's
			* /etc/services: file that contains a listing of all network Services and their assigned port numbers
		* /home
			* /home/.bash_profile: read as part of User login; sets-up your $PATH; calls the ~/.bashrc file
				* is also called: /home/.profile on some other Distros
			* /home/.bashrc: read as part of User login; calls the /etc/bashrc file to pull-in any additional functionality or aliases that have been defined for all User's on the... 
				* ...computer, as well as any that have been defined for the specific User, which are defined in the /home/.bashrc file itself
			* /home/.bash_logout: file that gets called on User logout and can be used to shutdown applications, display a logout message, or perform other environment cleanup tasks
			* /home/.bash_login: legacy file that's now been replaced by the /home/.bash_profile and /home/.bashrc files (does the same thing); read as part of User login
			* /home/.xsession-errors: hidden log file that captures stdout and stderr messages from your Display Manager for debugging graphical applications
			* /home/.forward: config file that lets a User make their own email forwarding rules (as opposed to the /etc/aliases file, which requires root access)
				* output:
					* column 1: User that will be forwarded all emails from the User who'se /home directory this .forward file contains
						* you can also specify email addresses (EX: kenny@linuxacademy.com, as opposed to: kenny (local User))
						* if you want to forward emails to an email address AND a local User, type a preceeding "\" in-front of the local User (EX: /kenny)
		* /usr
			* /usr/share/X11/xorg.conf.d: some default config files that come with X Server
			* /usr/share/zoneinfo: directory from which the $ tzselect, command and the: $ timedatectl list-timezones, pull their info
				* contains all available timezones for the computer, especially the one that keeps track of the computer's current timezone (Red Hat-based)
		* /var
			* /var/spool/cron/[user_name]: the crontab file for the specified User
				* must be Root User to access this file
			* /var/log: directory that contains a bunch of log files
				* any log files with a date appended to the end are old log files that were rotated out and new log files were created by the logrotate daemon on the date specified 
			* /var/log/dmesg: log file that gets recreated everytime the computer boots; contains messages from the Kernel itself
			* /var/log/messages: log file; if a Service doesn't have its own log file, those logs get sent here; core log file for a Linux computer
				* column 1: datetime this log was logged
				* column 2: hostname of the computer that generated the log
				* column 3: the item that generated the log (sometimes this could be the PID of the actual application or Service)
				* column 4: the log message
			* /var/log/secure: log file that contains session info, and info on successfull and unsuccessfull login attempts
			* /var/log/maillog: log file for emails going to and from your computer
		* /run
			* /run/log/journal: the location of the systemd Journal







	