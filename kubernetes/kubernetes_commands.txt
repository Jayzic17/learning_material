good documentation resource: kubernetes.io/docs/reference/generated/kubectl/kubectl-commands

kubectl [COMMAND] [TYPE] [NAME] [FLAGS]
	* TYPE: nodes, pods, replicaset, deployments, namespace, etc.
	* NAME: node_name, pod_name, replicaset_name, deployment_name, namespace_name, etc.

kubectl
	version
	--help
	get [TYPE]
		pods -o wide
			* gets all pods and shows their IP addresses
			* IP addresses are ephermeral for Pods
		pods --show-labels
		pods [--selector, -l] [label_name]=[label_value]
			* selects all Pods with the specified label
		pod [pod_name]
	delete [TYPE] [NAME]
	run [pod_name] --image=[image_name]
	[create, apply, replace] -f [pod-definition].yml
		* create creates the resource, apply applies the changes to an existing resource (or creates a new resource if it doesn't already exist), replace is the same as apply
		* if you create a resource with create, use replace to update it. If you use apply to create a resource, use apply to update it
	create [TYPE] [NAME] [FLAGS]
		create job [job_name] [--image=image_name] [--schedule="* * * * *"] [-- script_name]
		create cronjob [cronjob_name] [--image=image_name] [--schedule="* * * * *"] [-- script_name]
	describe [TYPE] [NAME]
		* returns info about the resource
	expose deployment [app_name] --type=[NodePort] --name=[nodeport_name] --port=[##] --targetport=[####] --nodeport=[####]
		* the expose command is an alternative way of creating Services using kubectl instead of the deployment.yml files
		* in this example we're creating a new NodePort Service for an existing Deployment
	kubectl run -it --rm --restart=Never busybox --image=gcr.io/google-containers/busybox sh
		* BusyBox: 300 of the most common UNIX commands bundled into a single command
		* in this example we're using 'rm'
		* BusyBox does not have 'curl'
	exec -it [pod_name] -- sh
		* opens an interactive shell terminal into the specified Pod 
	scale --replicas=[#] [deployment_name]
		* update # of replicas for a Deployment and performs a new deployment
	autoscale deployment [NAME] --min=[#] --max=[#] --cpu-percent=[##]
		* creates a Horizontal Pod Autoscaler
	logs [pod_name] --all-containers==trouble
		* returns logs for all Containers in the specified Pod
	rollout 
		history deploy [NAME]
			* returns the history of previous deployments
		status deployment [NAME]
			* returns the rollout status of your deployment
		undo deployment [NAME]
			* rollback to the previous deployment shown in the 'rollout histroy' command

helm
	package --sign [./mychart] --key [mykey] --keyring ~/.gnupg/secring.gpg
		* packages a Chart directory into a versioned Chart archive
		* versioned Chart archives are used by Helm package Repositories
	repo
		add [name] https://[link_here]
			* adds a Repository to Helm with the specified name
		update
			* updates local cache with the latest info from your added Repository
	install [release_name] [path_to_chart]
		* installs the specified Chart on the Cluster while also giving it a Release name
	create [name]
		* creates a folder, which itself is a Helm Chart with the specified name
		* contains all the default Helm files and folders needed to run the Helm Chart
	upgrade [release_name] [path_to_chart] --values [path_to_values.yml_file]
		* upgrades an existing Cluster with the specified Chart while also giving it a Release name
	ls
		* lists out all deployed Helm Releases in the Cluster

---KUBERNETES-RELEVANT LINUX COMMANDS---

nslookup [NAME]
	* returns DNS information about the Service with CoreDNS as the default DNS server for kubernetes
iptables -L
	* returns the IP Table used by Kube-Proxy (IP Tables are used by Kube-Proxy by default now, but will be replaced by IPVS)

